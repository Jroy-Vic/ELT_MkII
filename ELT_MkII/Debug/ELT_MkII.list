
ELT_MkII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a24  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001bac  08001bac  00002bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bec  08001bec  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001bec  08001bec  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bec  08001bec  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bec  08001bec  00002bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001bf0  08001bf0  00002bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001bf4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  08001c00  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08001c00  00003038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005dcf  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014d5  00000000  00000000  00008e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  0000a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000049e  00000000  00000000  0000a948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002530a  00000000  00000000  0000ade6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007b01  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e166e  00000000  00000000  00037bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011925f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001680  00000000  00000000  001192a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011a924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001b94 	.word	0x08001b94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001b94 	.word	0x08001b94

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	@ (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	@ (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <DMA_init>:
/* USART2 to Memory Transfer
 * USART2_RX: Channel 6, DMA1
 * -------------------------
 * Memory to Memory Transfer
 */
void DMA_init() {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	/* Initialize Clock for DMA1 */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 800025c:	4b34      	ldr	r3, [pc, #208]	@ (8000330 <DMA_init+0xd8>)
 800025e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000260:	4a33      	ldr	r2, [pc, #204]	@ (8000330 <DMA_init+0xd8>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6493      	str	r3, [r2, #72]	@ 0x48

	/* Disable DMA1 Channel 6 Configure */
	DMA1_Channel6->CCR &= ~DMA_CCR_EN;
 8000268:	4b32      	ldr	r3, [pc, #200]	@ (8000334 <DMA_init+0xdc>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a31      	ldr	r2, [pc, #196]	@ (8000334 <DMA_init+0xdc>)
 800026e:	f023 0301 	bic.w	r3, r3, #1
 8000272:	6013      	str	r3, [r2, #0]

	/* Set Peripheral Register Address (USART2_RX) in DMA1_CPAR6 */
	DMA1_Channel6->CPAR = (uint32_t) &(USART2->RDR);
 8000274:	4b2f      	ldr	r3, [pc, #188]	@ (8000334 <DMA_init+0xdc>)
 8000276:	4a30      	ldr	r2, [pc, #192]	@ (8000338 <DMA_init+0xe0>)
 8000278:	609a      	str	r2, [r3, #8]

	/* Set Memory Address (inBuff) in DMA1_CMAR1 */
	DMA1_Channel6->CMAR = (uint32_t) inputArr;
 800027a:	4b2e      	ldr	r3, [pc, #184]	@ (8000334 <DMA_init+0xdc>)
 800027c:	4a2f      	ldr	r2, [pc, #188]	@ (800033c <DMA_init+0xe4>)
 800027e:	60da      	str	r2, [r3, #12]

	/* Configure the Number of Data to Transfer in DMA_CNDTR6 */
	DMA1_Channel6->CNDTR = ARR_SIZE;
 8000280:	4b2c      	ldr	r3, [pc, #176]	@ (8000334 <DMA_init+0xdc>)
 8000282:	2206      	movs	r2, #6
 8000284:	605a      	str	r2, [r3, #4]

	/* Configure Channel 6 for USART2_Rx (C6S = 4'b0010) */
	DMA1_CSELR->CSELR &= ~DMA_CSELR_C6S;
 8000286:	4b2e      	ldr	r3, [pc, #184]	@ (8000340 <DMA_init+0xe8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a2d      	ldr	r2, [pc, #180]	@ (8000340 <DMA_init+0xe8>)
 800028c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000290:	6013      	str	r3, [r2, #0]
	DMA1_CSELR->CSELR |= (0x2 << DMA_CSELR_C6S_Pos);
 8000292:	4b2b      	ldr	r3, [pc, #172]	@ (8000340 <DMA_init+0xe8>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a2a      	ldr	r2, [pc, #168]	@ (8000340 <DMA_init+0xe8>)
 8000298:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800029c:	6013      	str	r3, [r2, #0]
	 * Circular Mode: CIRC - Enabled (1)
	 * Peripheral and Memory Incremented Mode: MINC - Enabled (1), PINC - Disabled (0)
	 * Peripheral and Memory Data Size: MSIZE - 8 Bits (00), PSIZE - 8 Bits (00)
	 * Interrupt Enable: TCIE - Enabled (1)
	 * */
	DMA1_Channel6->CCR &= ~(DMA_CCR_MEM2MEM | DMA_CCR_DIR);
 800029e:	4b25      	ldr	r3, [pc, #148]	@ (8000334 <DMA_init+0xdc>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a24      	ldr	r2, [pc, #144]	@ (8000334 <DMA_init+0xdc>)
 80002a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80002a8:	f023 0310 	bic.w	r3, r3, #16
 80002ac:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CCR |= DMA_CCR_PL;
 80002ae:	4b21      	ldr	r3, [pc, #132]	@ (8000334 <DMA_init+0xdc>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a20      	ldr	r2, [pc, #128]	@ (8000334 <DMA_init+0xdc>)
 80002b4:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80002b8:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CCR |= DMA_CCR_CIRC;
 80002ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000334 <DMA_init+0xdc>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a1d      	ldr	r2, [pc, #116]	@ (8000334 <DMA_init+0xdc>)
 80002c0:	f043 0320 	orr.w	r3, r3, #32
 80002c4:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CCR |= DMA_CCR_MINC;
 80002c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000334 <DMA_init+0xdc>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a1a      	ldr	r2, [pc, #104]	@ (8000334 <DMA_init+0xdc>)
 80002cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002d0:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CCR &= ~DMA_CCR_PINC;
 80002d2:	4b18      	ldr	r3, [pc, #96]	@ (8000334 <DMA_init+0xdc>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a17      	ldr	r2, [pc, #92]	@ (8000334 <DMA_init+0xdc>)
 80002d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80002dc:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CCR &= ~(DMA_CCR_MSIZE | DMA_CCR_PSIZE);
 80002de:	4b15      	ldr	r3, [pc, #84]	@ (8000334 <DMA_init+0xdc>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a14      	ldr	r2, [pc, #80]	@ (8000334 <DMA_init+0xdc>)
 80002e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80002e8:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CCR |= DMA_CCR_TCIE;
 80002ea:	4b12      	ldr	r3, [pc, #72]	@ (8000334 <DMA_init+0xdc>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a11      	ldr	r2, [pc, #68]	@ (8000334 <DMA_init+0xdc>)
 80002f0:	f043 0302 	orr.w	r3, r3, #2
 80002f4:	6013      	str	r3, [r2, #0]

	/* Enable NVIC for Interrupts */
	NVIC_SetPriority(DMA1_Channel6_IRQn, DMA1_CH6_NVIC_PRIORITY);
 80002f6:	2100      	movs	r1, #0
 80002f8:	2010      	movs	r0, #16
 80002fa:	f7ff ff83 	bl	8000204 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002fe:	2010      	movs	r0, #16
 8000300:	f7ff ff62 	bl	80001c8 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000304:	b662      	cpsie	i
}
 8000306:	bf00      	nop
	__enable_irq();

	/* Clear Any Pending Interrupts Before Enabling DMA Channel */
	DMA1->IFCR |= DMA_IFCR_CGIF6;
 8000308:	4b0e      	ldr	r3, [pc, #56]	@ (8000344 <DMA_init+0xec>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	4a0d      	ldr	r2, [pc, #52]	@ (8000344 <DMA_init+0xec>)
 800030e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000312:	6053      	str	r3, [r2, #4]
	DMA1->IFCR |= DMA_IFCR_CHTIF6;
 8000314:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <DMA_init+0xec>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <DMA_init+0xec>)
 800031a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800031e:	6053      	str	r3, [r2, #4]
	DMA1->IFCR |= DMA_IFCR_CTCIF6;
 8000320:	4b08      	ldr	r3, [pc, #32]	@ (8000344 <DMA_init+0xec>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	4a07      	ldr	r2, [pc, #28]	@ (8000344 <DMA_init+0xec>)
 8000326:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800032a:	6053      	str	r3, [r2, #4]
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40021000 	.word	0x40021000
 8000334:	4002006c 	.word	0x4002006c
 8000338:	40004424 	.word	0x40004424
 800033c:	2000002c 	.word	0x2000002c
 8000340:	400200a8 	.word	0x400200a8
 8000344:	40020000 	.word	0x40020000

08000348 <DMA_enable>:


/* Enable DMA Channels */
void DMA_enable() {
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	/* Activate Channel 6 */
	DMA1_Channel6->CCR |= DMA_CCR_EN;
 800034c:	4b05      	ldr	r3, [pc, #20]	@ (8000364 <DMA_enable+0x1c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a04      	ldr	r2, [pc, #16]	@ (8000364 <DMA_enable+0x1c>)
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	6013      	str	r3, [r2, #0]
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	4002006c 	.word	0x4002006c

08000368 <DMA1_Channel6_IRQHandler>:


/* Handle DMA Interrupts */
void DMA1_Channel6_IRQHandler() {
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	/* Set Array Flag when Transfer is Complete */
	if (DMA1->ISR & DMA_ISR_TCIF6) {
 800036c:	4b08      	ldr	r3, [pc, #32]	@ (8000390 <DMA1_Channel6_IRQHandler+0x28>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000374:	2b00      	cmp	r3, #0
 8000376:	d005      	beq.n	8000384 <DMA1_Channel6_IRQHandler+0x1c>
		/* Clear Interrupt Flag */
		DMA1->IFCR |= DMA_IFCR_CTCIF6;
 8000378:	4b05      	ldr	r3, [pc, #20]	@ (8000390 <DMA1_Channel6_IRQHandler+0x28>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	4a04      	ldr	r2, [pc, #16]	@ (8000390 <DMA1_Channel6_IRQHandler+0x28>)
 800037e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000382:	6053      	str	r3, [r2, #4]
	}
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000

08000394 <LASER_init>:
#include "TIM.h"
#include "Servo.h"


/* Initialize Laser Peripheral */
void LASER_init() {
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	 * MODER = Output (01)
	 * OTYPER = PP (0)
	 * OSPEEDR = Low Speed (00)
	 * PUPD = PD (10)
	 */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000398:	4b17      	ldr	r3, [pc, #92]	@ (80003f8 <LASER_init+0x64>)
 800039a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039c:	4a16      	ldr	r2, [pc, #88]	@ (80003f8 <LASER_init+0x64>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOC->MODER &= ~(GPIO_MODER_MODE3);
 80003a4:	4b15      	ldr	r3, [pc, #84]	@ (80003fc <LASER_init+0x68>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a14      	ldr	r2, [pc, #80]	@ (80003fc <LASER_init+0x68>)
 80003aa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80003ae:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE3_0);
 80003b0:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <LASER_init+0x68>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a11      	ldr	r2, [pc, #68]	@ (80003fc <LASER_init+0x68>)
 80003b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003ba:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT3);
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <LASER_init+0x68>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a0e      	ldr	r2, [pc, #56]	@ (80003fc <LASER_init+0x68>)
 80003c2:	f023 0308 	bic.w	r3, r3, #8
 80003c6:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED3);
 80003c8:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <LASER_init+0x68>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	4a0b      	ldr	r2, [pc, #44]	@ (80003fc <LASER_init+0x68>)
 80003ce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80003d2:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD3);
 80003d4:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <LASER_init+0x68>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	4a08      	ldr	r2, [pc, #32]	@ (80003fc <LASER_init+0x68>)
 80003da:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80003de:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD3);
 80003e0:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <LASER_init+0x68>)
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	4a05      	ldr	r2, [pc, #20]	@ (80003fc <LASER_init+0x68>)
 80003e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80003ea:	60d3      	str	r3, [r2, #12]
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000
 80003fc:	48000800 	.word	0x48000800

08000400 <LASER_activate>:


/* Activate Laser */
void LASER_activate() {
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
	/* Turn Laser on when Servo is Active */
	if ((TIM2->CCR1 > DEF_SERVO_CCRX) || (TIM2->CCR2 > DEF_SERVO_CCRY)) {
 8000404:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800040a:	2bfa      	cmp	r3, #250	@ 0xfa
 800040c:	d804      	bhi.n	8000418 <LASER_activate+0x18>
 800040e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000414:	2bfa      	cmp	r3, #250	@ 0xfa
 8000416:	d906      	bls.n	8000426 <LASER_activate+0x26>
		GPIOC->ODR |= GPIO_ODR_OD3;
 8000418:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <LASER_activate+0x40>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a08      	ldr	r2, [pc, #32]	@ (8000440 <LASER_activate+0x40>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6153      	str	r3, [r2, #20]
 8000424:	e006      	b.n	8000434 <LASER_activate+0x34>
	} else {
		GPIOC->ODR &= ~GPIO_ODR_OD3;
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <LASER_activate+0x40>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	4a05      	ldr	r2, [pc, #20]	@ (8000440 <LASER_activate+0x40>)
 800042c:	f023 0308 	bic.w	r3, r3, #8
 8000430:	6153      	str	r3, [r2, #20]
	}
}
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	48000800 	.word	0x48000800

08000444 <SERVO_init>:
#include "Servo.h"
#include "TIM.h"


/* Initialize ServoX and ServoY */
void SERVO_init(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	 * MODER = Output (01)
	 * OTYPER = PP (0)
	 * OSPEEDR = High Speed (10)
	 * PUPD = PD (10)
	 */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000448:	4b1f      	ldr	r3, [pc, #124]	@ (80004c8 <SERVO_init+0x84>)
 800044a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044c:	4a1e      	ldr	r2, [pc, #120]	@ (80004c8 <SERVO_init+0x84>)
 800044e:	f043 0304 	orr.w	r3, r3, #4
 8000452:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOC->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1);
 8000454:	4b1d      	ldr	r3, [pc, #116]	@ (80004cc <SERVO_init+0x88>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a1c      	ldr	r2, [pc, #112]	@ (80004cc <SERVO_init+0x88>)
 800045a:	f023 030f 	bic.w	r3, r3, #15
 800045e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0);
 8000460:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <SERVO_init+0x88>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a19      	ldr	r2, [pc, #100]	@ (80004cc <SERVO_init+0x88>)
 8000466:	f043 0305 	orr.w	r3, r3, #5
 800046a:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1);
 800046c:	4b17      	ldr	r3, [pc, #92]	@ (80004cc <SERVO_init+0x88>)
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	4a16      	ldr	r2, [pc, #88]	@ (80004cc <SERVO_init+0x88>)
 8000472:	f023 0303 	bic.w	r3, r3, #3
 8000476:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 | GPIO_OSPEEDR_OSPEED1);
 8000478:	4b14      	ldr	r3, [pc, #80]	@ (80004cc <SERVO_init+0x88>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	4a13      	ldr	r2, [pc, #76]	@ (80004cc <SERVO_init+0x88>)
 800047e:	f023 030f 	bic.w	r3, r3, #15
 8000482:	6093      	str	r3, [r2, #8]
	GPIOC->OSPEEDR |= (GPIO_OSPEEDR_OSPEED0_1 | GPIO_OSPEEDR_OSPEED1_1);
 8000484:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <SERVO_init+0x88>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	4a10      	ldr	r2, [pc, #64]	@ (80004cc <SERVO_init+0x88>)
 800048a:	f043 030a 	orr.w	r3, r3, #10
 800048e:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1);
 8000490:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <SERVO_init+0x88>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	4a0d      	ldr	r2, [pc, #52]	@ (80004cc <SERVO_init+0x88>)
 8000496:	f023 030f 	bic.w	r3, r3, #15
 800049a:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD0_1 | GPIO_PUPDR_PUPD1_1);
 800049c:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <SERVO_init+0x88>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	4a0a      	ldr	r2, [pc, #40]	@ (80004cc <SERVO_init+0x88>)
 80004a2:	f043 030a 	orr.w	r3, r3, #10
 80004a6:	60d3      	str	r3, [r2, #12]
	/* Set PCO and PC1 */
	GPIOC->ODR |= (GPIO_ODR_OD0 | GPIO_ODR_OD1);
 80004a8:	4b08      	ldr	r3, [pc, #32]	@ (80004cc <SERVO_init+0x88>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	4a07      	ldr	r2, [pc, #28]	@ (80004cc <SERVO_init+0x88>)
 80004ae:	f043 0303 	orr.w	r3, r3, #3
 80004b2:	6153      	str	r3, [r2, #20]

	/* Initialize Timer to Create PWM */
	TIM_init(DEF_SERVO_ARR, DEF_SERVO_CCRX, DEF_SERVO_CCRY, DEF_SERVO_UPDATE);
 80004b4:	23ff      	movs	r3, #255	@ 0xff
 80004b6:	22fa      	movs	r2, #250	@ 0xfa
 80004b8:	21fa      	movs	r1, #250	@ 0xfa
 80004ba:	f242 7010 	movw	r0, #10000	@ 0x2710
 80004be:	f000 f8bd 	bl	800063c <TIM_init>
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000
 80004cc:	48000800 	.word	0x48000800

080004d0 <SERVO_update>:


/* Update ServoX and ServoY Position
 * If -1 is Input, Retain Previous value
 */
void SERVO_update(int16_t x, int16_t y) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	460a      	mov	r2, r1
 80004da:	80fb      	strh	r3, [r7, #6]
 80004dc:	4613      	mov	r3, r2
 80004de:	80bb      	strh	r3, [r7, #4]
	/* Active when Update_Flag is Set */
	if (Update_Flag == SET) {
 80004e0:	4b2f      	ldr	r3, [pc, #188]	@ (80005a0 <SERVO_update+0xd0>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d157      	bne.n	8000598 <SERVO_update+0xc8>
		/* Clear Update_Flag */
		Update_Flag = CLEARED;
 80004e8:	4b2d      	ldr	r3, [pc, #180]	@ (80005a0 <SERVO_update+0xd0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]

		/* Retain Previous Value if -1 */
		if (x == NEGATIVE) {
 80004ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004f6:	d103      	bne.n	8000500 <SERVO_update+0x30>
			x = TIM2->CCR1;
 80004f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004fe:	80fb      	strh	r3, [r7, #6]
		}
		if (y == NEGATIVE) {
 8000500:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000508:	d103      	bne.n	8000512 <SERVO_update+0x42>
			y = TIM2->CCR2;
 800050a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800050e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000510:	80bb      	strh	r3, [r7, #4]
		}

		/* Compare Difference in Previous to Current Values */
		int16_t dX = (TIM2->CCR1 - x);
 8000512:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000518:	b29a      	uxth	r2, r3
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	b29b      	uxth	r3, r3
 8000520:	81fb      	strh	r3, [r7, #14]
		int16_t dY = (TIM2->CCR2 - y);
 8000522:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000528:	b29a      	uxth	r2, r3
 800052a:	88bb      	ldrh	r3, [r7, #4]
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	b29b      	uxth	r3, r3
 8000530:	81bb      	strh	r3, [r7, #12]
		if (dX < 0) {
 8000532:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000536:	2b00      	cmp	r3, #0
 8000538:	da03      	bge.n	8000542 <SERVO_update+0x72>
			dX *= NEGATIVE;
 800053a:	89fb      	ldrh	r3, [r7, #14]
 800053c:	425b      	negs	r3, r3
 800053e:	b29b      	uxth	r3, r3
 8000540:	81fb      	strh	r3, [r7, #14]
		}
		if (dY < 0) {
 8000542:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000546:	2b00      	cmp	r3, #0
 8000548:	da03      	bge.n	8000552 <SERVO_update+0x82>
			dY *= NEGATIVE;
 800054a:	89bb      	ldrh	r3, [r7, #12]
 800054c:	425b      	negs	r3, r3
 800054e:	b29b      	uxth	r3, r3
 8000550:	81bb      	strh	r3, [r7, #12]
		}

		/* Change CCR Values to Adjust Position */
		TIM_setCCR(x, y);
 8000552:	88fb      	ldrh	r3, [r7, #6]
 8000554:	88ba      	ldrh	r2, [r7, #4]
 8000556:	4611      	mov	r1, r2
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f8db 	bl	8000714 <TIM_setCCR>

		/* Handle Quick Position Changes */
		if ((dX > SERVO_POS_HANDLER) || (dY > SERVO_POS_HANDLER)) {
 800055e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000562:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000566:	dc04      	bgt.n	8000572 <SERVO_update+0xa2>
 8000568:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800056c:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000570:	dd12      	ble.n	8000598 <SERVO_update+0xc8>
			for (uint8_t i = 0; i < SERVO_POS_DELAY; i++) {
 8000572:	2300      	movs	r3, #0
 8000574:	72fb      	strb	r3, [r7, #11]
 8000576:	e00c      	b.n	8000592 <SERVO_update+0xc2>
			  SERVO_activate();
 8000578:	f000 f84a 	bl	8000610 <SERVO_activate>
			  SERVO_update(x,y);
 800057c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000584:	4611      	mov	r1, r2
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff ffa2 	bl	80004d0 <SERVO_update>
			for (uint8_t i = 0; i < SERVO_POS_DELAY; i++) {
 800058c:	7afb      	ldrb	r3, [r7, #11]
 800058e:	3301      	adds	r3, #1
 8000590:	72fb      	strb	r3, [r7, #11]
 8000592:	7afb      	ldrb	r3, [r7, #11]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d9ef      	bls.n	8000578 <SERVO_update+0xa8>
		  }
		}
	}
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000002b 	.word	0x2000002b

080005a4 <SERVO_PWM_toggle>:


/* Handle PWM Signal */
void SERVO_PWM_toggle() {
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	/* Output HIGH Signal to GPIO when PWM_Flag is Set */
	if (PWM_Flag == SET) {
 80005a8:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <SERVO_PWM_toggle+0x5c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d108      	bne.n	80005c2 <SERVO_PWM_toggle+0x1e>
		GPIOC->ODR |= (GPIO_ODR_OD0 | GPIO_ODR_OD1);
 80005b0:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <SERVO_PWM_toggle+0x60>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	4a13      	ldr	r2, [pc, #76]	@ (8000604 <SERVO_PWM_toggle+0x60>)
 80005b6:	f043 0303 	orr.w	r3, r3, #3
 80005ba:	6153      	str	r3, [r2, #20]
		/* Clear Flag */
		PWM_Flag = CLEARED;
 80005bc:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <SERVO_PWM_toggle+0x5c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	}

	/* Pull Signal LOW if Servo_Flag is Set */
	if (ServoX_Flag == SET) {
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <SERVO_PWM_toggle+0x64>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d108      	bne.n	80005dc <SERVO_PWM_toggle+0x38>
		GPIOC->ODR &= ~GPIO_ODR_OD0;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <SERVO_PWM_toggle+0x60>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000604 <SERVO_PWM_toggle+0x60>)
 80005d0:	f023 0301 	bic.w	r3, r3, #1
 80005d4:	6153      	str	r3, [r2, #20]
		/* Clear Flag */
		ServoX_Flag = CLEARED;
 80005d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <SERVO_PWM_toggle+0x64>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
	}
	if (ServoY_Flag == SET) {
 80005dc:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <SERVO_PWM_toggle+0x68>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d108      	bne.n	80005f6 <SERVO_PWM_toggle+0x52>
		GPIOC->ODR &= ~GPIO_ODR_OD1;
 80005e4:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <SERVO_PWM_toggle+0x60>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	4a06      	ldr	r2, [pc, #24]	@ (8000604 <SERVO_PWM_toggle+0x60>)
 80005ea:	f023 0302 	bic.w	r3, r3, #2
 80005ee:	6153      	str	r3, [r2, #20]
		/* Clear Flag */
		ServoY_Flag = CLEARED;
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <SERVO_PWM_toggle+0x68>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
	}
 }
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	2000002a 	.word	0x2000002a
 8000604:	48000800 	.word	0x48000800
 8000608:	20000028 	.word	0x20000028
 800060c:	20000029 	.word	0x20000029

08000610 <SERVO_activate>:


/* Activate Servo */
void SERVO_activate() {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < SERVO_DELAY; i++) {
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	e004      	b.n	8000626 <SERVO_activate+0x16>
		SERVO_PWM_toggle();
 800061c:	f7ff ffc2 	bl	80005a4 <SERVO_PWM_toggle>
	for (uint32_t i = 0; i < SERVO_DELAY; i++) {
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3301      	adds	r3, #1
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f241 3287 	movw	r2, #4999	@ 0x1387
 800062c:	4293      	cmp	r3, r2
 800062e:	d9f5      	bls.n	800061c <SERVO_activate+0xc>
	}
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <TIM_init>:
uint8_t PWM_Flag;
uint8_t Update_Flag;


/* Initialize Timer (Set to 4MHz, Prescaled Down to 500kHz) */
void TIM_init(uint16_t arr_val, uint16_t ccr1_val, uint16_t ccr2_val, uint16_t ccr3_val) {
 800063c:	b490      	push	{r4, r7}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4604      	mov	r4, r0
 8000644:	4608      	mov	r0, r1
 8000646:	4611      	mov	r1, r2
 8000648:	461a      	mov	r2, r3
 800064a:	4623      	mov	r3, r4
 800064c:	80fb      	strh	r3, [r7, #6]
 800064e:	4603      	mov	r3, r0
 8000650:	80bb      	strh	r3, [r7, #4]
 8000652:	460b      	mov	r3, r1
 8000654:	807b      	strh	r3, [r7, #2]
 8000656:	4613      	mov	r3, r2
 8000658:	803b      	strh	r3, [r7, #0]
  /* Enabling clock for TIM2 (4MHz) */
  RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 800065a:	4b2c      	ldr	r3, [pc, #176]	@ (800070c <TIM_init+0xd0>)
 800065c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800065e:	4a2b      	ldr	r2, [pc, #172]	@ (800070c <TIM_init+0xd0>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6593      	str	r3, [r2, #88]	@ 0x58

  TIM2->CR1 &= ~TIM_CR1_CEN;	// Temporarily turn off Timer
 8000666:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000670:	f023 0301 	bic.w	r3, r3, #1
 8000674:	6013      	str	r3, [r2, #0]
  TIM2->PSC = TIM2_PRESCALER;	// Scale Clock down to 500kHz to Save Power
 8000676:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800067a:	2207      	movs	r2, #7
 800067c:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM2->ARR = arr_val;			// Creates 50Hz PWM
 800067e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIM2->CCR1 = ccr1_val;		// ServoX Duration
 8000686:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800068a:	88bb      	ldrh	r3, [r7, #4]
 800068c:	6353      	str	r3, [r2, #52]	@ 0x34
  TIM2->CCR2 = ccr2_val;		// SErvoY Duration
 800068e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000692:	887b      	ldrh	r3, [r7, #2]
 8000694:	6393      	str	r3, [r2, #56]	@ 0x38
  TIM2->CCR3 = ccr3_val;		// Toggle Timer
 8000696:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800069a:	883b      	ldrh	r3, [r7, #0]
 800069c:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Set TIM2 interrupts to be highest priority */
  NVIC->IP[TIM2_IRQn] = TIM2_PRIORITY;
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <TIM_init+0xd4>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  /* Enable NVIC to handle TIM2 interrupts */
  NVIC->ISER[TIM2_NVIC] = (1 << (TIM2_IRQn & 0x1F));
 80006a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <TIM_init+0xd4>)
 80006a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80006ae:	b662      	cpsie	i
}
 80006b0:	bf00      	nop
  __enable_irq();

  /* Set Timer Conditions and Enable */
  TIM2->CR1 &= ~TIM_CR1_UDIS;	// Enable UEVs
 80006b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006bc:	f023 0302 	bic.w	r3, r3, #2
 80006c0:	6013      	str	r3, [r2, #0]
  TIM2->DIER |= (TIM_DIER_UIE | TIM_DIER_CC1IE
 80006c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006cc:	f043 030f 	orr.w	r3, r3, #15
 80006d0:	60d3      	str	r3, [r2, #12]
		  	  | TIM_DIER_CC2IE | TIM_DIER_CC3IE);	// Enable hardware interrupt
  TIM2->CR1 |= TIM_CR1_CEN;	// Enable timer
 80006d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6013      	str	r3, [r2, #0]
  TIM2->EGR |= TIM_EGR_UG;	// Force Update Event to reset timer
 80006e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6153      	str	r3, [r2, #20]
  TIM2->EGR |= ~TIM_EGR_UG;	// Toggle off Force Update Event
 80006f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006fc:	f063 0301 	orn	r3, r3, #1
 8000700:	6153      	str	r3, [r2, #20]
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bc90      	pop	{r4, r7}
 800070a:	4770      	bx	lr
 800070c:	40021000 	.word	0x40021000
 8000710:	e000e100 	.word	0xe000e100

08000714 <TIM_setCCR>:
	Update_Flag = CLEARED;
}


/* Change CRR Values */
void TIM_setCCR(uint16_t ccr1, uint16_t ccr2) {
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	460a      	mov	r2, r1
 800071e:	80fb      	strh	r3, [r7, #6]
 8000720:	4613      	mov	r3, r2
 8000722:	80bb      	strh	r3, [r7, #4]
	/* Set CCR1 and CCR2 Value for TIM2 */
	TIM2->CCR1 = ccr1;
 8000724:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM2->CCR2 = ccr2;
 800072c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000730:	88bb      	ldrh	r3, [r7, #4]
 8000732:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <TIM2_IRQHandler>:
	TIM_reset();
}


/* TIM2 Interrupt Handler */
void TIM2_IRQHandler() {
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	/* If CCR1 is reached, Set ServoX_Flag */
	if (TIM2->SR & TIM_SR_CC1IF) {
 8000744:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000748:	691b      	ldr	r3, [r3, #16]
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00a      	beq.n	8000768 <TIM2_IRQHandler+0x28>
		ServoX_Flag = SET;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <TIM2_IRQHandler+0xa0>)
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
		/* Clear CCR1IF */
		TIM2->SR &= ~TIM_SR_CC1IF;
 8000758:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800075c:	691b      	ldr	r3, [r3, #16]
 800075e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000762:	f023 0302 	bic.w	r3, r3, #2
 8000766:	6113      	str	r3, [r2, #16]
	}
	/* If CCR2 is reached, Set ServoY_Flag */
	if (TIM2->SR & TIM_SR_CC2IF) {
 8000768:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800076c:	691b      	ldr	r3, [r3, #16]
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	2b00      	cmp	r3, #0
 8000774:	d00a      	beq.n	800078c <TIM2_IRQHandler+0x4c>
		ServoY_Flag = SET;
 8000776:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <TIM2_IRQHandler+0xa4>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
		/* Clear CCR2IF */
		TIM2->SR &= ~TIM_SR_CC2IF;
 800077c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000780:	691b      	ldr	r3, [r3, #16]
 8000782:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000786:	f023 0304 	bic.w	r3, r3, #4
 800078a:	6113      	str	r3, [r2, #16]
	}
	/* If ARR is reached, Set PWM_Flag */
	if (TIM2->SR & TIM_SR_UIF) {
 800078c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	2b00      	cmp	r3, #0
 8000798:	d00a      	beq.n	80007b0 <TIM2_IRQHandler+0x70>
		PWM_Flag = SET;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <TIM2_IRQHandler+0xa8>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
		/* Clear UIF */
		TIM2->SR &= ~TIM_SR_UIF;
 80007a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007a4:	691b      	ldr	r3, [r3, #16]
 80007a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007aa:	f023 0301 	bic.w	r3, r3, #1
 80007ae:	6113      	str	r3, [r2, #16]
	}
	/* If CCR3 is reached, Set Update_Flag */
	if (TIM2->SR & TIM_SR_CC3IF) {
 80007b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007b4:	691b      	ldr	r3, [r3, #16]
 80007b6:	f003 0308 	and.w	r3, r3, #8
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00a      	beq.n	80007d4 <TIM2_IRQHandler+0x94>
		Update_Flag = SET;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <TIM2_IRQHandler+0xac>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
		/* Clear UIF */
		TIM2->SR &= ~TIM_SR_CC3IF;
 80007c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007c8:	691b      	ldr	r3, [r3, #16]
 80007ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ce:	f023 0308 	bic.w	r3, r3, #8
 80007d2:	6113      	str	r3, [r2, #16]
	}
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000028 	.word	0x20000028
 80007e4:	20000029 	.word	0x20000029
 80007e8:	2000002a 	.word	0x2000002a
 80007ec:	2000002b 	.word	0x2000002b

080007f0 <UART_init>:
#include "main.h"
#include "UART.h"
#include <stdlib.h>

/* Initialize and Configure USART2 */
void UART_init() {
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
	 * PA3 = USART2_RX
	 * PA4 = USART2_CK */

	/* GPIO Configuration */
	/* Set Clock */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80007f4:	4b3c      	ldr	r3, [pc, #240]	@ (80008e8 <UART_init+0xf8>)
 80007f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f8:	4a3b      	ldr	r2, [pc, #236]	@ (80008e8 <UART_init+0xf8>)
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8000800:	4b39      	ldr	r3, [pc, #228]	@ (80008e8 <UART_init+0xf8>)
 8000802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000804:	4a38      	ldr	r2, [pc, #224]	@ (80008e8 <UART_init+0xf8>)
 8000806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800080a:	6593      	str	r3, [r2, #88]	@ 0x58
	/* MODE = Alt. Func (10) */
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3 |
 800080c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000816:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800081a:	6013      	str	r3, [r2, #0]
					GPIO_MODER_MODE4);
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1 |
 800081c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000826:	f443 7328 	orr.w	r3, r3, #672	@ 0x2a0
 800082a:	6013      	str	r3, [r2, #0]
					GPIO_MODER_MODE4_1);
	/* AFL = AF7 (0111) */
	GPIOA->AFR[0] |= (GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3 |
 800082c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000830:	6a1b      	ldr	r3, [r3, #32]
 8000832:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000836:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 800083a:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 800083e:	6213      	str	r3, [r2, #32]
					GPIO_AFRL_AFSEL4);
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2_3 | GPIO_AFRL_AFSEL3_3 |
 8000840:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000844:	6a1b      	ldr	r3, [r3, #32]
 8000846:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800084a:	f423 2308 	bic.w	r3, r3, #557056	@ 0x88000
 800084e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000852:	6213      	str	r3, [r2, #32]
					GPIO_AFRL_AFSEL4_3);
	/* OTYPER = PP (0) */
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3 |
 8000854:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800085e:	f023 031c 	bic.w	r3, r3, #28
 8000862:	6053      	str	r3, [r2, #4]
					GPIO_OTYPER_OT4);
	/* OSPEEDR = Very High Speed (11) */
	GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3 |
 8000864:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800086e:	f443 737c 	orr.w	r3, r3, #1008	@ 0x3f0
 8000872:	6093      	str	r3, [r2, #8]
					GPIO_OSPEEDR_OSPEED4);
	/* PUPDR = No PUPD (00) */
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3 |
 8000874:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800087e:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 8000882:	60d3      	str	r3, [r2, #12]
					GPIO_PUPDR_PUPD4);

	/* USART2 Configuration */
	/* Disable USART2 to configure (Clear UE Bit) */
	USART2->CR1 &= ~USART_CR1_UE;
 8000884:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <UART_init+0xfc>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <UART_init+0xfc>)
 800088a:	f023 0301 	bic.w	r3, r3, #1
 800088e:	6013      	str	r3, [r2, #0]
	/* Set Word Length to 8 Bits (M0, M1 = 00) */
	USART2->CR1 &= ~USART_CR1_M1;
 8000890:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <UART_init+0xfc>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a15      	ldr	r2, [pc, #84]	@ (80008ec <UART_init+0xfc>)
 8000896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800089a:	6013      	str	r3, [r2, #0]
	USART2->CR1 &= ~USART_CR1_M0;
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <UART_init+0xfc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <UART_init+0xfc>)
 80008a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008a6:	6013      	str	r3, [r2, #0]
	/* Set Oversampling by 8 to account for Baud Rate
	 * Using 8 to save power */
	USART2->CR1 |= USART_CR1_OVER8;
 80008a8:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <UART_init+0xfc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0f      	ldr	r2, [pc, #60]	@ (80008ec <UART_init+0xfc>)
 80008ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008b2:	6013      	str	r3, [r2, #0]
	/* Configure STOP Bits (1 Stop Bit) */
	USART2->CR2 &= ~USART_CR2_STOP;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <UART_init+0xfc>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	4a0c      	ldr	r2, [pc, #48]	@ (80008ec <UART_init+0xfc>)
 80008ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80008be:	6053      	str	r3, [r2, #4]
	/* Enabled USART2 RX DMA Request */
	USART2->CR3 |= USART_CR3_DMAR;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <UART_init+0xfc>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	4a09      	ldr	r2, [pc, #36]	@ (80008ec <UART_init+0xfc>)
 80008c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008ca:	6093      	str	r3, [r2, #8]
	/* Set Baud Rate */
	/* When OVER8 = 1: BRR[15:4] = USARTDIV[15:4]
	 * 				   BRR[3] must be kept cleared
	 * 				   BRR[2:0] = USARTDIV[3:0] shifted 1 bit to the right
	 */
	USART2->BRR = ((BAUD_RATE & 0xFFF0) | (BAUD_RATE & ~0x000F) |
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <UART_init+0xfc>)
 80008ce:	2242      	movs	r2, #66	@ 0x42
 80008d0:	60da      	str	r2, [r3, #12]
					((BAUD_RATE & 0x000F) >> 1));

	/* Enable USART2 */
	USART2->CR1 |= (USART_CR1_RE | USART_CR1_UE);
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <UART_init+0xfc>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <UART_init+0xfc>)
 80008d8:	f043 0305 	orr.w	r3, r3, #5
 80008dc:	6013      	str	r3, [r2, #0]
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40004400 	.word	0x40004400

080008f0 <main>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f4:	f000 f99b 	bl	8000c2e <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80008f8:	f000 f8be 	bl	8000a78 <SystemClock_Config>

  /* Initialize UART Communication with Terminal */
  UART_init();
 80008fc:	f7ff ff78 	bl	80007f0 <UART_init>

  /* Initialize DMA Transfer Between UART and Memory */
  DMA_init();
 8000900:	f7ff fcaa 	bl	8000258 <DMA_init>
  /* Enable DMA Transfer */
  DMA_enable();
 8000904:	f7ff fd20 	bl	8000348 <DMA_enable>

  /* Initialize Servo Peripherals */
  SERVO_init();
 8000908:	f7ff fd9c 	bl	8000444 <SERVO_init>

  /* Initialize Laser Peripheral */
  LASER_init();
 800090c:	f7ff fd42 	bl	8000394 <LASER_init>

  /* Set Terminal and Servos to Default State */
  SERVO_activate();
 8000910:	f7ff fe7e 	bl	8000610 <SERVO_activate>

  while (1)
  {
	  /* Control ServoX and ServoY Using Python Script */
	  SERVO_activate();
 8000914:	f7ff fe7c 	bl	8000610 <SERVO_activate>
	  LASER_activate();
 8000918:	f7ff fd72 	bl	8000400 <LASER_activate>
	  input_handler();
 800091c:	f000 f884 	bl	8000a28 <input_handler>
	  SERVO_activate();
 8000920:	bf00      	nop
 8000922:	e7f7      	b.n	8000914 <main+0x24>

08000924 <isDigit>:
  }
}


/* Check if a Char is a Number */
uint8_t isDigit(char element) {
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
    if (element >= '0' && element <= '9') {
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	2b2f      	cmp	r3, #47	@ 0x2f
 8000932:	d904      	bls.n	800093e <isDigit+0x1a>
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b39      	cmp	r3, #57	@ 0x39
 8000938:	d801      	bhi.n	800093e <isDigit+0x1a>
        return SET;
 800093a:	2301      	movs	r3, #1
 800093c:	e000      	b.n	8000940 <isDigit+0x1c>
    } else {
        return CLEARED;
 800093e:	2300      	movs	r3, #0
    }
}
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <input_convert>:


/* Convert String into Integer */
int16_t input_convert() {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
	/* Create Indexer (Skip First Element) */
	uint8_t idx = 1;
 8000952:	2301      	movs	r3, #1
 8000954:	71fb      	strb	r3, [r7, #7]
	char element;

	/* Create Accumulator */
	uint16_t sum = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	80bb      	strh	r3, [r7, #4]

	/* Collect Chars */
	while (((element = inputArr[idx]) != NULL_BYTE) && (element != CARRIAGE)
 800095a:	e027      	b.n	80009ac <input_convert+0x60>
			&& (element != NEW_LINE)) {
		/* Check if Input is Valid */
		if (isDigit(element)) {
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ffe0 	bl	8000924 <isDigit>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d01a      	beq.n	80009a0 <input_convert+0x54>
			sum += (CHAR_TO_INT(element) * DIGIT_SELECT(idx));
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	3b30      	subs	r3, #48	@ 0x30
 800096e:	b29a      	uxth	r2, r3
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d00b      	beq.n	800098e <input_convert+0x42>
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d006      	beq.n	800098a <input_convert+0x3e>
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2b03      	cmp	r3, #3
 8000980:	d101      	bne.n	8000986 <input_convert+0x3a>
 8000982:	230a      	movs	r3, #10
 8000984:	e005      	b.n	8000992 <input_convert+0x46>
 8000986:	2301      	movs	r3, #1
 8000988:	e003      	b.n	8000992 <input_convert+0x46>
 800098a:	2364      	movs	r3, #100	@ 0x64
 800098c:	e001      	b.n	8000992 <input_convert+0x46>
 800098e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000992:	fb13 f302 	smulbb	r3, r3, r2
 8000996:	b29a      	uxth	r2, r3
 8000998:	88bb      	ldrh	r3, [r7, #4]
 800099a:	4413      	add	r3, r2
 800099c:	80bb      	strh	r3, [r7, #4]
 800099e:	e002      	b.n	80009a6 <input_convert+0x5a>
		} else {
			/* Retain Previous Value */
			return NEGATIVE;
 80009a0:	f04f 33ff 	mov.w	r3, #4294967295
 80009a4:	e03a      	b.n	8000a1c <input_convert+0xd0>
		}

		/* Increment through Array */
		idx++;
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	3301      	adds	r3, #1
 80009aa:	71fb      	strb	r3, [r7, #7]
	while (((element = inputArr[idx]) != NULL_BYTE) && (element != CARRIAGE)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	4a1d      	ldr	r2, [pc, #116]	@ (8000a24 <input_convert+0xd8>)
 80009b0:	5cd3      	ldrb	r3, [r2, r3]
 80009b2:	70fb      	strb	r3, [r7, #3]
			&& (element != NEW_LINE)) {
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d005      	beq.n	80009c6 <input_convert+0x7a>
	while (((element = inputArr[idx]) != NULL_BYTE) && (element != CARRIAGE)
 80009ba:	78fb      	ldrb	r3, [r7, #3]
 80009bc:	2b0d      	cmp	r3, #13
 80009be:	d002      	beq.n	80009c6 <input_convert+0x7a>
			&& (element != NEW_LINE)) {
 80009c0:	78fb      	ldrb	r3, [r7, #3]
 80009c2:	2b0a      	cmp	r3, #10
 80009c4:	d1ca      	bne.n	800095c <input_convert+0x10>
	}

	/* Handle Incomplete Inputs */
	if ((element == NEW_LINE) || (element == CARRIAGE)) {
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	2b0a      	cmp	r3, #10
 80009ca:	d002      	beq.n	80009d2 <input_convert+0x86>
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b0d      	cmp	r3, #13
 80009d0:	d114      	bne.n	80009fc <input_convert+0xb0>
		sum /= DIGIT_SELECT((idx - 1));
 80009d2:	88ba      	ldrh	r2, [r7, #4]
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d00b      	beq.n	80009f2 <input_convert+0xa6>
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d006      	beq.n	80009ee <input_convert+0xa2>
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	d101      	bne.n	80009ea <input_convert+0x9e>
 80009e6:	230a      	movs	r3, #10
 80009e8:	e005      	b.n	80009f6 <input_convert+0xaa>
 80009ea:	2301      	movs	r3, #1
 80009ec:	e003      	b.n	80009f6 <input_convert+0xaa>
 80009ee:	2364      	movs	r3, #100	@ 0x64
 80009f0:	e001      	b.n	80009f6 <input_convert+0xaa>
 80009f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80009fa:	80bb      	strh	r3, [r7, #4]
	}

	/* If Sum is Less than or Greater than Servo Thresholds, Restrict Values */
	if (sum < MIN_SERVO_POS) {
 80009fc:	88bb      	ldrh	r3, [r7, #4]
 80009fe:	2bf9      	cmp	r3, #249	@ 0xf9
 8000a00:	d802      	bhi.n	8000a08 <input_convert+0xbc>
		sum = MIN_SERVO_POS;
 8000a02:	23fa      	movs	r3, #250	@ 0xfa
 8000a04:	80bb      	strh	r3, [r7, #4]
 8000a06:	e007      	b.n	8000a18 <input_convert+0xcc>
	} else if (sum > MAX_SERVO_POS) {
 8000a08:	88bb      	ldrh	r3, [r7, #4]
 8000a0a:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d902      	bls.n	8000a18 <input_convert+0xcc>
		sum = MAX_SERVO_POS;
 8000a12:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 8000a16:	80bb      	strh	r3, [r7, #4]
	}

	return sum;
 8000a18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000002c 	.word	0x2000002c

08000a28 <input_handler>:


/* Handle Inputs from Terminal */
void input_handler() {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	/* Check which Servo the Data Belongs to */
	if ((inputArr[0] == 'x') || (inputArr[0] == 'X')) {
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <input_handler+0x4c>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b78      	cmp	r3, #120	@ 0x78
 8000a32:	d003      	beq.n	8000a3c <input_handler+0x14>
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <input_handler+0x4c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b58      	cmp	r3, #88	@ 0x58
 8000a3a:	d108      	bne.n	8000a4e <input_handler+0x26>
		SERVO_update(input_convert(), NEGATIVE);
 8000a3c:	f7ff ff86 	bl	800094c <input_convert>
 8000a40:	4603      	mov	r3, r0
 8000a42:	f04f 31ff 	mov.w	r1, #4294967295
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fd42 	bl	80004d0 <SERVO_update>
	} else if ((inputArr[0] == 'y') || (inputArr[0] == 'Y')) {
		SERVO_update(NEGATIVE, input_convert());
	}
}
 8000a4c:	e00f      	b.n	8000a6e <input_handler+0x46>
	} else if ((inputArr[0] == 'y') || (inputArr[0] == 'Y')) {
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <input_handler+0x4c>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b79      	cmp	r3, #121	@ 0x79
 8000a54:	d003      	beq.n	8000a5e <input_handler+0x36>
 8000a56:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <input_handler+0x4c>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b59      	cmp	r3, #89	@ 0x59
 8000a5c:	d107      	bne.n	8000a6e <input_handler+0x46>
		SERVO_update(NEGATIVE, input_convert());
 8000a5e:	f7ff ff75 	bl	800094c <input_convert>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6a:	f7ff fd31 	bl	80004d0 <SERVO_update>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000002c 	.word	0x2000002c

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b096      	sub	sp, #88	@ 0x58
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	2244      	movs	r2, #68	@ 0x44
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f858 	bl	8001b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a9a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a9e:	f000 fa2f 	bl	8000f00 <HAL_PWREx_ControlVoltageScaling>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000aa8:	f000 f82c 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000aac:	2310      	movs	r3, #16
 8000aae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ab8:	2360      	movs	r3, #96	@ 0x60
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fa71 	bl	8000fac <HAL_RCC_OscConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000ad0:	f000 f818 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 fe39 	bl	8001764 <HAL_RCC_ClockConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000af8:	f000 f804 	bl	8000b04 <Error_Handler>
  }
}
 8000afc:	bf00      	nop
 8000afe:	3758      	adds	r7, #88	@ 0x58
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b32:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <MemManage_Handler+0x4>

08000b70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bae:	f000 f893 	bl	8000cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be0:	f7ff ffea 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	@ (8000c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <LoopForever+0xe>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c28 <LoopForever+0x16>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f000 ff9f 	bl	8001b4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c0e:	f7ff fe6f 	bl	80008f0 <main>

08000c12 <LoopForever>:

LoopForever:
    b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c20:	08001bf4 	.word	0x08001bf4
  ldr r2, =_sbss
 8000c24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c28:	20000038 	.word	0x20000038

08000c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC1_2_IRQHandler>

08000c2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c34:	2300      	movs	r3, #0
 8000c36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f91f 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3e:	200f      	movs	r0, #15
 8000c40:	f000 f80e 	bl	8000c60 <HAL_InitTick>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d002      	beq.n	8000c50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	71fb      	strb	r3, [r7, #7]
 8000c4e:	e001      	b.n	8000c54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c50:	f7ff ff5e 	bl	8000b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <HAL_InitTick+0x6c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d023      	beq.n	8000cbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <HAL_InitTick+0x70>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <HAL_InitTick+0x6c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f91d 	bl	8000eca <HAL_SYSTICK_Config>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d10f      	bne.n	8000cb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d809      	bhi.n	8000cb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f000 f8f5 	bl	8000e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <HAL_InitTick+0x74>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	e007      	b.n	8000cc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	e004      	b.n	8000cc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
 8000cba:	e001      	b.n	8000cc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000034 	.word	0x20000034

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000034 	.word	0x20000034

08000d18 <__NVIC_SetPriorityGrouping>:
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_SetPriority>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	@ (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	@ (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	@ 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	@ 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff47 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5c 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff8e 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb0 	bl	8000e38 <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ee8:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <HAL_PWREx_GetVoltageRange+0x18>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40007000 	.word	0x40007000

08000f00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f0e:	d130      	bne.n	8000f72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f10:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f1c:	d038      	beq.n	8000f90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f26:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2232      	movs	r2, #50	@ 0x32
 8000f34:	fb02 f303 	mul.w	r3, r2, r3
 8000f38:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3e:	0c9b      	lsrs	r3, r3, #18
 8000f40:	3301      	adds	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f44:	e002      	b.n	8000f4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f58:	d102      	bne.n	8000f60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f2      	bne.n	8000f46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f60:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f6c:	d110      	bne.n	8000f90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e00f      	b.n	8000f92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f72:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f7e:	d007      	beq.n	8000f90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f80:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f88:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40007000 	.word	0x40007000
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	431bde83 	.word	0x431bde83

08000fac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e3ca      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fbe:	4b97      	ldr	r3, [pc, #604]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
 8000fc6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fc8:	4b94      	ldr	r3, [pc, #592]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0310 	and.w	r3, r3, #16
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 80e4 	beq.w	80011a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d007      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x4a>
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	2b0c      	cmp	r3, #12
 8000fea:	f040 808b 	bne.w	8001104 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	f040 8087 	bne.w	8001104 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ff6:	4b89      	ldr	r3, [pc, #548]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <HAL_RCC_OscConfig+0x62>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e3a2      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a1a      	ldr	r2, [r3, #32]
 8001012:	4b82      	ldr	r3, [pc, #520]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <HAL_RCC_OscConfig+0x7c>
 800101e:	4b7f      	ldr	r3, [pc, #508]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001026:	e005      	b.n	8001034 <HAL_RCC_OscConfig+0x88>
 8001028:	4b7c      	ldr	r3, [pc, #496]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 800102a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800102e:	091b      	lsrs	r3, r3, #4
 8001030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001034:	4293      	cmp	r3, r2
 8001036:	d223      	bcs.n	8001080 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fd1d 	bl	8001a7c <RCC_SetFlashLatencyFromMSIRange>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e383      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800104c:	4b73      	ldr	r3, [pc, #460]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a72      	ldr	r2, [pc, #456]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b70      	ldr	r3, [pc, #448]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	496d      	ldr	r1, [pc, #436]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001066:	4313      	orrs	r3, r2
 8001068:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800106a:	4b6c      	ldr	r3, [pc, #432]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	4968      	ldr	r1, [pc, #416]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 800107a:	4313      	orrs	r3, r2
 800107c:	604b      	str	r3, [r1, #4]
 800107e:	e025      	b.n	80010cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001080:	4b66      	ldr	r3, [pc, #408]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a65      	ldr	r2, [pc, #404]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b63      	ldr	r3, [pc, #396]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4960      	ldr	r1, [pc, #384]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 800109a:	4313      	orrs	r3, r2
 800109c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800109e:	4b5f      	ldr	r3, [pc, #380]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	495b      	ldr	r1, [pc, #364]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d109      	bne.n	80010cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fcdd 	bl	8001a7c <RCC_SetFlashLatencyFromMSIRange>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e343      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010cc:	f000 fc4a 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 80010d0:	4602      	mov	r2, r0
 80010d2:	4b52      	ldr	r3, [pc, #328]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	091b      	lsrs	r3, r3, #4
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	4950      	ldr	r1, [pc, #320]	@ (8001220 <HAL_RCC_OscConfig+0x274>)
 80010de:	5ccb      	ldrb	r3, [r1, r3]
 80010e0:	f003 031f 	and.w	r3, r3, #31
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001224 <HAL_RCC_OscConfig+0x278>)
 80010ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001228 <HAL_RCC_OscConfig+0x27c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fdb5 	bl	8000c60 <HAL_InitTick>
 80010f6:	4603      	mov	r3, r0
 80010f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d052      	beq.n	80011a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	e327      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d032      	beq.n	8001172 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800110c:	4b43      	ldr	r3, [pc, #268]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a42      	ldr	r2, [pc, #264]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001118:	f7ff fdf2 	bl	8000d00 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001120:	f7ff fdee 	bl	8000d00 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e310      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001132:	4b3a      	ldr	r3, [pc, #232]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800113e:	4b37      	ldr	r3, [pc, #220]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a36      	ldr	r2, [pc, #216]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b34      	ldr	r3, [pc, #208]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	4931      	ldr	r1, [pc, #196]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001158:	4313      	orrs	r3, r2
 800115a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800115c:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	492c      	ldr	r1, [pc, #176]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 800116c:	4313      	orrs	r3, r2
 800116e:	604b      	str	r3, [r1, #4]
 8001170:	e01a      	b.n	80011a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001172:	4b2a      	ldr	r3, [pc, #168]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a29      	ldr	r2, [pc, #164]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001178:	f023 0301 	bic.w	r3, r3, #1
 800117c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800117e:	f7ff fdbf 	bl	8000d00 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001186:	f7ff fdbb 	bl	8000d00 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e2dd      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001198:	4b20      	ldr	r3, [pc, #128]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f0      	bne.n	8001186 <HAL_RCC_OscConfig+0x1da>
 80011a4:	e000      	b.n	80011a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d074      	beq.n	800129e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d005      	beq.n	80011c6 <HAL_RCC_OscConfig+0x21a>
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	2b0c      	cmp	r3, #12
 80011be:	d10e      	bne.n	80011de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d10b      	bne.n	80011de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d064      	beq.n	800129c <HAL_RCC_OscConfig+0x2f0>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d160      	bne.n	800129c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e2ba      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011e6:	d106      	bne.n	80011f6 <HAL_RCC_OscConfig+0x24a>
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 80011ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	e026      	b.n	8001244 <HAL_RCC_OscConfig+0x298>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011fe:	d115      	bne.n	800122c <HAL_RCC_OscConfig+0x280>
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a05      	ldr	r2, [pc, #20]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001206:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a02      	ldr	r2, [pc, #8]	@ (800121c <HAL_RCC_OscConfig+0x270>)
 8001212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e014      	b.n	8001244 <HAL_RCC_OscConfig+0x298>
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	08001bac 	.word	0x08001bac
 8001224:	20000000 	.word	0x20000000
 8001228:	20000004 	.word	0x20000004
 800122c:	4ba0      	ldr	r3, [pc, #640]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a9f      	ldr	r2, [pc, #636]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b9d      	ldr	r3, [pc, #628]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a9c      	ldr	r2, [pc, #624]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d013      	beq.n	8001274 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124c:	f7ff fd58 	bl	8000d00 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fd54 	bl	8000d00 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	@ 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e276      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001266:	4b92      	ldr	r3, [pc, #584]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0x2a8>
 8001272:	e014      	b.n	800129e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001274:	f7ff fd44 	bl	8000d00 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fd40 	bl	8000d00 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	@ 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e262      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800128e:	4b88      	ldr	r3, [pc, #544]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x2d0>
 800129a:	e000      	b.n	800129e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d060      	beq.n	800136c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_OscConfig+0x310>
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b0c      	cmp	r3, #12
 80012b4:	d119      	bne.n	80012ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d116      	bne.n	80012ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012bc:	4b7c      	ldr	r3, [pc, #496]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_OscConfig+0x328>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e23f      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d4:	4b76      	ldr	r3, [pc, #472]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	061b      	lsls	r3, r3, #24
 80012e2:	4973      	ldr	r1, [pc, #460]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012e8:	e040      	b.n	800136c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d023      	beq.n	800133a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f2:	4b6f      	ldr	r3, [pc, #444]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a6e      	ldr	r2, [pc, #440]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fe:	f7ff fcff 	bl	8000d00 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff fcfb 	bl	8000d00 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e21d      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001318:	4b65      	ldr	r3, [pc, #404]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b62      	ldr	r3, [pc, #392]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	061b      	lsls	r3, r3, #24
 8001332:	495f      	ldr	r1, [pc, #380]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
 8001338:	e018      	b.n	800136c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133a:	4b5d      	ldr	r3, [pc, #372]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a5c      	ldr	r2, [pc, #368]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fcdb 	bl	8000d00 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134e:	f7ff fcd7 	bl	8000d00 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e1f9      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001360:	4b53      	ldr	r3, [pc, #332]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f0      	bne.n	800134e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d03c      	beq.n	80013f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d01c      	beq.n	80013ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001380:	4b4b      	ldr	r3, [pc, #300]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001386:	4a4a      	ldr	r2, [pc, #296]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001390:	f7ff fcb6 	bl	8000d00 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff fcb2 	bl	8000d00 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e1d4      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013aa:	4b41      	ldr	r3, [pc, #260]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 80013ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ef      	beq.n	8001398 <HAL_RCC_OscConfig+0x3ec>
 80013b8:	e01b      	b.n	80013f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ba:	4b3d      	ldr	r3, [pc, #244]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 80013bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013c0:	4a3b      	ldr	r2, [pc, #236]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 80013c2:	f023 0301 	bic.w	r3, r3, #1
 80013c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ca:	f7ff fc99 	bl	8000d00 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d2:	f7ff fc95 	bl	8000d00 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1b7      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013e4:	4b32      	ldr	r3, [pc, #200]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 80013e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1ef      	bne.n	80013d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80a6 	beq.w	800154c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001404:	4b2a      	ldr	r3, [pc, #168]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10d      	bne.n	800142c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001414:	4a26      	ldr	r2, [pc, #152]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141a:	6593      	str	r3, [r2, #88]	@ 0x58
 800141c:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 800141e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001428:	2301      	movs	r3, #1
 800142a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800142c:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <HAL_RCC_OscConfig+0x508>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001434:	2b00      	cmp	r3, #0
 8001436:	d118      	bne.n	800146a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001438:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <HAL_RCC_OscConfig+0x508>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a1d      	ldr	r2, [pc, #116]	@ (80014b4 <HAL_RCC_OscConfig+0x508>)
 800143e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001442:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001444:	f7ff fc5c 	bl	8000d00 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144c:	f7ff fc58 	bl	8000d00 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e17a      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800145e:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <HAL_RCC_OscConfig+0x508>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d108      	bne.n	8001484 <HAL_RCC_OscConfig+0x4d8>
 8001472:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001478:	4a0d      	ldr	r2, [pc, #52]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001482:	e029      	b.n	80014d8 <HAL_RCC_OscConfig+0x52c>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b05      	cmp	r3, #5
 800148a:	d115      	bne.n	80014b8 <HAL_RCC_OscConfig+0x50c>
 800148c:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 800148e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001492:	4a07      	ldr	r2, [pc, #28]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800149c:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 800149e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014a2:	4a03      	ldr	r2, [pc, #12]	@ (80014b0 <HAL_RCC_OscConfig+0x504>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014ac:	e014      	b.n	80014d8 <HAL_RCC_OscConfig+0x52c>
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40007000 	.word	0x40007000
 80014b8:	4b9c      	ldr	r3, [pc, #624]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 80014ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014be:	4a9b      	ldr	r2, [pc, #620]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014c8:	4b98      	ldr	r3, [pc, #608]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 80014ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ce:	4a97      	ldr	r2, [pc, #604]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 80014d0:	f023 0304 	bic.w	r3, r3, #4
 80014d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d016      	beq.n	800150e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7ff fc0e 	bl	8000d00 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014e6:	e00a      	b.n	80014fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e8:	f7ff fc0a 	bl	8000d00 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e12a      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014fe:	4b8b      	ldr	r3, [pc, #556]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 8001500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0ed      	beq.n	80014e8 <HAL_RCC_OscConfig+0x53c>
 800150c:	e015      	b.n	800153a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7ff fbf7 	bl	8000d00 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001514:	e00a      	b.n	800152c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001516:	f7ff fbf3 	bl	8000d00 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001524:	4293      	cmp	r3, r2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e113      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800152c:	4b7f      	ldr	r3, [pc, #508]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 800152e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1ed      	bne.n	8001516 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800153a:	7ffb      	ldrb	r3, [r7, #31]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d105      	bne.n	800154c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001540:	4b7a      	ldr	r3, [pc, #488]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001544:	4a79      	ldr	r2, [pc, #484]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 8001546:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800154a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80fe 	beq.w	8001752 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155a:	2b02      	cmp	r3, #2
 800155c:	f040 80d0 	bne.w	8001700 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001560:	4b72      	ldr	r3, [pc, #456]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001570:	429a      	cmp	r2, r3
 8001572:	d130      	bne.n	80015d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	3b01      	subs	r3, #1
 8001580:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001582:	429a      	cmp	r2, r3
 8001584:	d127      	bne.n	80015d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001590:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001592:	429a      	cmp	r2, r3
 8001594:	d11f      	bne.n	80015d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80015a0:	2a07      	cmp	r2, #7
 80015a2:	bf14      	ite	ne
 80015a4:	2201      	movne	r2, #1
 80015a6:	2200      	moveq	r2, #0
 80015a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d113      	bne.n	80015d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015b8:	085b      	lsrs	r3, r3, #1
 80015ba:	3b01      	subs	r3, #1
 80015bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015be:	429a      	cmp	r2, r3
 80015c0:	d109      	bne.n	80015d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	3b01      	subs	r3, #1
 80015d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d06e      	beq.n	80016b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2b0c      	cmp	r3, #12
 80015da:	d069      	beq.n	80016b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015dc:	4b53      	ldr	r3, [pc, #332]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d105      	bne.n	80015f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80015e8:	4b50      	ldr	r3, [pc, #320]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0ad      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015f8:	4b4c      	ldr	r3, [pc, #304]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a4b      	ldr	r2, [pc, #300]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 80015fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001602:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001604:	f7ff fb7c 	bl	8000d00 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff fb78 	bl	8000d00 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e09a      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800161e:	4b43      	ldr	r3, [pc, #268]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162a:	4b40      	ldr	r3, [pc, #256]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	4b40      	ldr	r3, [pc, #256]	@ (8001730 <HAL_RCC_OscConfig+0x784>)
 8001630:	4013      	ands	r3, r2
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800163a:	3a01      	subs	r2, #1
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	4311      	orrs	r1, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001644:	0212      	lsls	r2, r2, #8
 8001646:	4311      	orrs	r1, r2
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800164c:	0852      	lsrs	r2, r2, #1
 800164e:	3a01      	subs	r2, #1
 8001650:	0552      	lsls	r2, r2, #21
 8001652:	4311      	orrs	r1, r2
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001658:	0852      	lsrs	r2, r2, #1
 800165a:	3a01      	subs	r2, #1
 800165c:	0652      	lsls	r2, r2, #25
 800165e:	4311      	orrs	r1, r2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001664:	0912      	lsrs	r2, r2, #4
 8001666:	0452      	lsls	r2, r2, #17
 8001668:	430a      	orrs	r2, r1
 800166a:	4930      	ldr	r1, [pc, #192]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 800166c:	4313      	orrs	r3, r2
 800166e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001670:	4b2e      	ldr	r3, [pc, #184]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a2d      	ldr	r2, [pc, #180]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 8001676:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800167a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800167c:	4b2b      	ldr	r3, [pc, #172]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4a2a      	ldr	r2, [pc, #168]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 8001682:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001686:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001688:	f7ff fb3a 	bl	8000d00 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb36 	bl	8000d00 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e058      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016ae:	e050      	b.n	8001752 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e04f      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b4:	4b1d      	ldr	r3, [pc, #116]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d148      	bne.n	8001752 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016c0:	4b1a      	ldr	r3, [pc, #104]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a19      	ldr	r2, [pc, #100]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 80016c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016cc:	4b17      	ldr	r3, [pc, #92]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4a16      	ldr	r2, [pc, #88]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 80016d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016d8:	f7ff fb12 	bl	8000d00 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e0:	f7ff fb0e 	bl	8000d00 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e030      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016f2:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x734>
 80016fe:	e028      	b.n	8001752 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2b0c      	cmp	r3, #12
 8001704:	d023      	beq.n	800174e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a08      	ldr	r2, [pc, #32]	@ (800172c <HAL_RCC_OscConfig+0x780>)
 800170c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff faf5 	bl	8000d00 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001718:	e00c      	b.n	8001734 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff faf1 	bl	8000d00 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d905      	bls.n	8001734 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e013      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
 800172c:	40021000 	.word	0x40021000
 8001730:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001734:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_RCC_OscConfig+0x7b0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1ec      	bne.n	800171a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_RCC_OscConfig+0x7b0>)
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	4905      	ldr	r1, [pc, #20]	@ (800175c <HAL_RCC_OscConfig+0x7b0>)
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_RCC_OscConfig+0x7b4>)
 8001748:	4013      	ands	r3, r2
 800174a:	60cb      	str	r3, [r1, #12]
 800174c:	e001      	b.n	8001752 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021000 	.word	0x40021000
 8001760:	feeefffc 	.word	0xfeeefffc

08001764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0e7      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b75      	ldr	r3, [pc, #468]	@ (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d910      	bls.n	80017a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b72      	ldr	r3, [pc, #456]	@ (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 0207 	bic.w	r2, r3, #7
 800178e:	4970      	ldr	r1, [pc, #448]	@ (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	4313      	orrs	r3, r2
 8001794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b6e      	ldr	r3, [pc, #440]	@ (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0cf      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d010      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	4b66      	ldr	r3, [pc, #408]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d908      	bls.n	80017d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c4:	4b63      	ldr	r3, [pc, #396]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4960      	ldr	r1, [pc, #384]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d04c      	beq.n	800187c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d121      	bne.n	800183a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0a6      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001802:	4b54      	ldr	r3, [pc, #336]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d115      	bne.n	800183a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e09a      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800181a:	4b4e      	ldr	r3, [pc, #312]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e08e      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182a:	4b4a      	ldr	r3, [pc, #296]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e086      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800183a:	4b46      	ldr	r3, [pc, #280]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f023 0203 	bic.w	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4943      	ldr	r1, [pc, #268]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800184c:	f7ff fa58 	bl	8000d00 <HAL_GetTick>
 8001850:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	e00a      	b.n	800186a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001854:	f7ff fa54 	bl	8000d00 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e06e      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	4b3a      	ldr	r3, [pc, #232]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 020c 	and.w	r2, r3, #12
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	429a      	cmp	r2, r3
 800187a:	d1eb      	bne.n	8001854 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d010      	beq.n	80018aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	4b31      	ldr	r3, [pc, #196]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001894:	429a      	cmp	r2, r3
 8001896:	d208      	bcs.n	80018aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001898:	4b2e      	ldr	r3, [pc, #184]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	492b      	ldr	r1, [pc, #172]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018aa:	4b29      	ldr	r3, [pc, #164]	@ (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d210      	bcs.n	80018da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b8:	4b25      	ldr	r3, [pc, #148]	@ (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 0207 	bic.w	r2, r3, #7
 80018c0:	4923      	ldr	r1, [pc, #140]	@ (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c8:	4b21      	ldr	r3, [pc, #132]	@ (8001950 <HAL_RCC_ClockConfig+0x1ec>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d001      	beq.n	80018da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e036      	b.n	8001948 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	4918      	ldr	r1, [pc, #96]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d009      	beq.n	8001918 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001904:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4910      	ldr	r1, [pc, #64]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 8001914:	4313      	orrs	r3, r2
 8001916:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001918:	f000 f824 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 800191c:	4602      	mov	r2, r0
 800191e:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <HAL_RCC_ClockConfig+0x1f0>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	490b      	ldr	r1, [pc, #44]	@ (8001958 <HAL_RCC_ClockConfig+0x1f4>)
 800192a:	5ccb      	ldrb	r3, [r1, r3]
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
 8001934:	4a09      	ldr	r2, [pc, #36]	@ (800195c <HAL_RCC_ClockConfig+0x1f8>)
 8001936:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <HAL_RCC_ClockConfig+0x1fc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff f98f 	bl	8000c60 <HAL_InitTick>
 8001942:	4603      	mov	r3, r0
 8001944:	72fb      	strb	r3, [r7, #11]

  return status;
 8001946:	7afb      	ldrb	r3, [r7, #11]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40022000 	.word	0x40022000
 8001954:	40021000 	.word	0x40021000
 8001958:	08001bac 	.word	0x08001bac
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	@ 0x24
 8001968:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001972:	4b3e      	ldr	r3, [pc, #248]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800197c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x34>
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d121      	bne.n	80019d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d11e      	bne.n	80019d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001998:	4b34      	ldr	r3, [pc, #208]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019a4:	4b31      	ldr	r3, [pc, #196]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80019a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019aa:	0a1b      	lsrs	r3, r3, #8
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e005      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019b4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10d      	bne.n	80019ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d102      	bne.n	80019e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019dc:	4b25      	ldr	r3, [pc, #148]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x110>)
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	e004      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019e8:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x114>)
 80019ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	d134      	bne.n	8001a5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019f2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d003      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0xa6>
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d003      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0xac>
 8001a08:	e005      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a0c:	617b      	str	r3, [r7, #20]
      break;
 8001a0e:	e005      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a10:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a12:	617b      	str	r3, [r7, #20]
      break;
 8001a14:	e002      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	617b      	str	r3, [r7, #20]
      break;
 8001a1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	3301      	adds	r3, #1
 8001a28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	fb03 f202 	mul.w	r2, r3, r2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	0e5b      	lsrs	r3, r3, #25
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a5c:	69bb      	ldr	r3, [r7, #24]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	@ 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	08001bbc 	.word	0x08001bbc
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	007a1200 	.word	0x007a1200

08001a7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a88:	4b2a      	ldr	r3, [pc, #168]	@ (8001b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a94:	f7ff fa26 	bl	8000ee4 <HAL_PWREx_GetVoltageRange>
 8001a98:	6178      	str	r0, [r7, #20]
 8001a9a:	e014      	b.n	8001ac6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a9c:	4b25      	ldr	r3, [pc, #148]	@ (8001b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa0:	4a24      	ldr	r2, [pc, #144]	@ (8001b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aa8:	4b22      	ldr	r3, [pc, #136]	@ (8001b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ab4:	f7ff fa16 	bl	8000ee4 <HAL_PWREx_GetVoltageRange>
 8001ab8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001aba:	4b1e      	ldr	r3, [pc, #120]	@ (8001b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	4a1d      	ldr	r2, [pc, #116]	@ (8001b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ac0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001acc:	d10b      	bne.n	8001ae6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b80      	cmp	r3, #128	@ 0x80
 8001ad2:	d919      	bls.n	8001b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ad8:	d902      	bls.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ada:	2302      	movs	r3, #2
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	e013      	b.n	8001b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	e010      	b.n	8001b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b80      	cmp	r3, #128	@ 0x80
 8001aea:	d902      	bls.n	8001af2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001aec:	2303      	movs	r3, #3
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	e00a      	b.n	8001b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b80      	cmp	r3, #128	@ 0x80
 8001af6:	d102      	bne.n	8001afe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001af8:	2302      	movs	r3, #2
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	e004      	b.n	8001b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b70      	cmp	r3, #112	@ 0x70
 8001b02:	d101      	bne.n	8001b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b04:	2301      	movs	r3, #1
 8001b06:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 0207 	bic.w	r2, r3, #7
 8001b10:	4909      	ldr	r1, [pc, #36]	@ (8001b38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b18:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d001      	beq.n	8001b2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40022000 	.word	0x40022000

08001b3c <memset>:
 8001b3c:	4402      	add	r2, r0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d100      	bne.n	8001b46 <memset+0xa>
 8001b44:	4770      	bx	lr
 8001b46:	f803 1b01 	strb.w	r1, [r3], #1
 8001b4a:	e7f9      	b.n	8001b40 <memset+0x4>

08001b4c <__libc_init_array>:
 8001b4c:	b570      	push	{r4, r5, r6, lr}
 8001b4e:	4d0d      	ldr	r5, [pc, #52]	@ (8001b84 <__libc_init_array+0x38>)
 8001b50:	4c0d      	ldr	r4, [pc, #52]	@ (8001b88 <__libc_init_array+0x3c>)
 8001b52:	1b64      	subs	r4, r4, r5
 8001b54:	10a4      	asrs	r4, r4, #2
 8001b56:	2600      	movs	r6, #0
 8001b58:	42a6      	cmp	r6, r4
 8001b5a:	d109      	bne.n	8001b70 <__libc_init_array+0x24>
 8001b5c:	4d0b      	ldr	r5, [pc, #44]	@ (8001b8c <__libc_init_array+0x40>)
 8001b5e:	4c0c      	ldr	r4, [pc, #48]	@ (8001b90 <__libc_init_array+0x44>)
 8001b60:	f000 f818 	bl	8001b94 <_init>
 8001b64:	1b64      	subs	r4, r4, r5
 8001b66:	10a4      	asrs	r4, r4, #2
 8001b68:	2600      	movs	r6, #0
 8001b6a:	42a6      	cmp	r6, r4
 8001b6c:	d105      	bne.n	8001b7a <__libc_init_array+0x2e>
 8001b6e:	bd70      	pop	{r4, r5, r6, pc}
 8001b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b74:	4798      	blx	r3
 8001b76:	3601      	adds	r6, #1
 8001b78:	e7ee      	b.n	8001b58 <__libc_init_array+0xc>
 8001b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b7e:	4798      	blx	r3
 8001b80:	3601      	adds	r6, #1
 8001b82:	e7f2      	b.n	8001b6a <__libc_init_array+0x1e>
 8001b84:	08001bec 	.word	0x08001bec
 8001b88:	08001bec 	.word	0x08001bec
 8001b8c:	08001bec 	.word	0x08001bec
 8001b90:	08001bf0 	.word	0x08001bf0

08001b94 <_init>:
 8001b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b96:	bf00      	nop
 8001b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b9a:	bc08      	pop	{r3}
 8001b9c:	469e      	mov	lr, r3
 8001b9e:	4770      	bx	lr

08001ba0 <_fini>:
 8001ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba2:	bf00      	nop
 8001ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ba6:	bc08      	pop	{r3}
 8001ba8:	469e      	mov	lr, r3
 8001baa:	4770      	bx	lr
